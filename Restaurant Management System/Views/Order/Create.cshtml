@model Service_Layer.Dtos.OrderDto

@{
    ViewBag.Title = "Create";
}

<h2>Create Order</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Order Details</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <!-- Customer Phone Number -->
        <div class="form-group">
            @Html.LabelFor(model => model.customer.Phone, "Customer Phone", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.customer.Phone, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.customer.Phone, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Menu Items with Quantity TextBox -->
        <div class="form-group">
            <label class="control-label col-md-2">Menu Items</label>
            <div class="col-md-10">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Menu Item</th>
                            <th>Price</th>
                            <th>Quantity</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in ViewBag.MenuItems)
                        {
                            <tr>
                                <td>@item.itemName</td>
                                <td>@item.price.ToString("C")</td>
                                <td>
                                    <input type="number" name="Quantities[@item.Id]" class="form-control quantity-input" min="0" />
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Discount Field -->
        <div class="form-group">
            @Html.LabelFor(model => model.discount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.discount, new { htmlAttributes = new { @class = "form-control discount-input" } })
                @Html.ValidationMessageFor(model => model.discount, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Total Price Display -->
        <div class="form-group">
            <label class="control-label col-md-2">Total Price</label>
            <div class="col-md-10">
                <input type="text" id="totalPrice" name="totalPrice" class="form-control" readonly />
            </div>
        </div>

        <!-- Submit Button -->
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        // Calculate the total price whenever quantities or discount change
        function calculateTotal() {
            let total = 0;
            const discount = parseFloat($('.discount-input').val()) || 0;

            $('.quantity-input').each(function () {
                const quantity = parseFloat($(this).val()) || 0;
                const price = parseFloat($(this).closest('tr').find('td:nth-child(2)').text().replace('$', '')) || 0;
                total += quantity * price;
            });

            // Apply discount
            total = total - (total * (discount / 100));

            $('#totalPrice').val(total.toFixed(2));
        }

        // Bind the calculation to quantity and discount input changes
        $(document).on('input', '.quantity-input, .discount-input', calculateTotal);
    </script>
}
